
# VocationalNYC Project

This project is a Django-based web application configured to run using Docker. The application has been migrated from SQLite to PostgreSQL. This README outlines the steps required for local development, CI/CD testing, and production deployment.

---

## Prerequisites

- **Docker & Docker Compose:** Ensure you have [Docker](https://docs.docker.com/get-docker/) and [Docker Compose](https://docs.docker.com/compose/install/) installed.
- **Python 3.12+:** (For local development outside Docker, if needed.)
- **Git:** To clone the repository.

---

## Project Structure

- **Dockerfile:** Multi-stage build file that creates a production-ready image.
- **docker-compose.yml:** Configuration for local development, CI/CD, and testing.
- **.env:** Environment variable file for local development and CI/CD. **(For development purpose only.)**
- **.ebignore:** Files and directories to exclude for AWS Elastic Beanstalk deployments.
- **Django settings:** Configured to read environment variables via [django-environ](https://django-environ.readthedocs.io/en/latest/).

---

## Environment Variables

The project uses environment variables to configure database settings, secret keys, and other configurations. An example `.env` file:

```dotenv
# .env file for local development and CI/CD
DEBUG=True
DJANGO_ENV=development
SECRET_KEY=development-secret-key

# PostgreSQL settings
POSTGRES_DB=vocationalnyc_db
POSTGRES_USER=db_admin
POSTGRES_PASSWORD=secret-db-password
POSTGRES_HOST=db
POSTGRES_PORT=5432

# Optionally, you can set DATABASE_URL like:
# DATABASE_URL=postgres://db_admin:secret-db-password@db:5432/vocationalnyc_db
```

For production, environment variables are set via deployment platform.

---

## Local Development

1. **Start Docker Compose:**

   This command will build the images (if necessary) and start both the application and the PostgreSQL container.

   ```bash
   docker-compose up --build
   ```

2. **Access the App:**

   - In development mode, the Django development server listens on port `8000`. Open browser and go to [http://localhost:8000](http://localhost:8000).

3. **Run Migrations (Recommended):**

   If needed, run migrations inside the running container:

   ```bash
   docker-compose exec app python manage.py migrate
   ```

4. **Creating a Superuser (Optional):**

   ```bash
   docker-compose exec app python manage.py createsuperuser
   ```

---

## CI/CD Environment

For CI/CD pipeline:

- **Environment Variables:**  
  Configure CI/CD secrets for `SECRET_KEY`, `POSTGRES_DB`, `POSTGRES_USER`, `POSTGRES_PASSWORD`, etc.
  
- **Build & Test:**  
  Use Docker Compose to spin up the app and database. For example, in CI configuration, run:

  ```bash
  docker-compose up --build -d
  docker-compose exec app python manage.py migrate
  # Run tests:
  docker-compose exec app python manage.py test
  ```

- **Important:**  
  Do not include `docker-compose.override.yml` in CI/CD pipline

---

## Production Deployment

For production deployments:

- **Dockerfile:**  
  The Dockerfile is optimized for production with Gunicorn serving the application on port `5000`.

- **Environment Variables:**  
  Do not include `.env` in EB production deployment. Instead, configure environment variables via the EB console or CI/CD pipeline.

---

## Switching Between SQLite and PostgreSQL

- **SQLite (for quick local testing):**  
  Modify `settings.py` to use the SQLite configuration if `DATABASE_URL` is not provided.

- **PostgreSQL:**  
  When `DATABASE_URL` (or separate `POSTGRES_*` variables) is defined, the settings use PostgreSQL. This is the default in our Dockerized configuration.

Example conditional configuration in `settings.py`:

```python
import environ
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(BASE_DIR / '.env')

if env('DATABASE_URL', default=None):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('POSTGRES_DB'),
            'USER': env('POSTGRES_USER'),
            'PASSWORD': env('POSTGRES_PASSWORD'),
            'HOST': env('POSTGRES_HOST', default='db'),
            'PORT': env.int('POSTGRES_PORT', default=5432),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

```

---

## Troubleshooting

- **Volume Persistence:**  
  PostgreSQL data is persisted via the named volume `postgres_data`. On Linux, this is typically stored at `/var/lib/docker/volumes/postgres_data/_data`.
  